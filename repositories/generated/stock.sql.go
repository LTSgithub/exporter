// Code generated by sqlc. DO NOT EDIT.
// source: stock.sql

package generated

import (
	"context"
)

const createStock = `-- name: CreateStock :exec
insert into stock(code,name, type,create_time,update_time) values (?,?,?,?,?)
`

type CreateStockParams struct {
	Code       string `db:"code" json:"code"`
	Name       string `db:"name" json:"name"`
	Type       string `db:"type" json:"type"`
	CreateTime string `db:"create_time" json:"createTime"`
	UpdateTime string `db:"update_time" json:"updateTime"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) error {
	_, err := q.exec(ctx, q.createStockStmt, createStock,
		arg.Code,
		arg.Name,
		arg.Type,
		arg.CreateTime,
		arg.UpdateTime,
	)
	return err
}

const getNotUpdateStockCodeList = `-- name: GetNotUpdateStockCodeList :many
select code from stock where update_time != ? limit 99
`

func (q *Queries) GetNotUpdateStockCodeList(ctx context.Context, updateTime string) ([]string, error) {
	rows, err := q.query(ctx, q.getNotUpdateStockCodeListStmt, getNotUpdateStockCodeList, updateTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotUpdateStockList = `-- name: GetNotUpdateStockList :many
select code, name, type, create_time, update_time from stock where update_time != ? limit 99
`

func (q *Queries) GetNotUpdateStockList(ctx context.Context, updateTime string) ([]Stock, error) {
	rows, err := q.query(ctx, q.getNotUpdateStockListStmt, getNotUpdateStockList, updateTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.Type,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockCount = `-- name: GetStockCount :one
select count(code) from stock
`

func (q *Queries) GetStockCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getStockCountStmt, getStockCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getStockList = `-- name: GetStockList :many
select code, name, type, create_time, update_time from stock
`

func (q *Queries) GetStockList(ctx context.Context) ([]Stock, error) {
	rows, err := q.query(ctx, q.getStockListStmt, getStockList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.Type,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
