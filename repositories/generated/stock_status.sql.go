// Code generated by sqlc. DO NOT EDIT.
// source: stock_status.sql

package generated

import (
	"context"
)

const getNotUpdateStockList = `-- name: GetNotUpdateStockList :many
select code, sprice, name, type, create_time, update_time from stock_status where update_time != ? limit 99
`

func (q *Queries) GetNotUpdateStockList(ctx context.Context, updateTime string) ([]StockStatus, error) {
	rows, err := q.query(ctx, q.getNotUpdateStockListStmt, getNotUpdateStockList, updateTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockStatus
	for rows.Next() {
		var i StockStatus
		if err := rows.Scan(
			&i.Code,
			&i.Sprice,
			&i.Name,
			&i.Type,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockStatusCount = `-- name: GetStockStatusCount :one
select count(code) from stock_status
`

func (q *Queries) GetStockStatusCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getStockStatusCountStmt, getStockStatusCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getStockStatusList = `-- name: GetStockStatusList :many
select code, sprice, name, type, create_time, update_time from stock_status
`

func (q *Queries) GetStockStatusList(ctx context.Context) ([]StockStatus, error) {
	rows, err := q.query(ctx, q.getStockStatusListStmt, getStockStatusList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockStatus
	for rows.Next() {
		var i StockStatus
		if err := rows.Scan(
			&i.Code,
			&i.Sprice,
			&i.Name,
			&i.Type,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStockStatus = `-- name: InsertStockStatus :exec
insert into stock_status(code,name, sprice,type,create_time,update_time) values (?,?,?,?,?,?)
`

type InsertStockStatusParams struct {
	Code       string  `db:"code" json:"code"`
	Name       string  `db:"name" json:"name"`
	Sprice     float64 `db:"sprice" json:"sprice"`
	Type       string  `db:"type" json:"type"`
	CreateTime string  `db:"create_time" json:"createTime"`
	UpdateTime string  `db:"update_time" json:"updateTime"`
}

func (q *Queries) InsertStockStatus(ctx context.Context, arg InsertStockStatusParams) error {
	_, err := q.exec(ctx, q.insertStockStatusStmt, insertStockStatus,
		arg.Code,
		arg.Name,
		arg.Sprice,
		arg.Type,
		arg.CreateTime,
		arg.UpdateTime,
	)
	return err
}

const updateStockStatus = `-- name: UpdateStockStatus :exec
update stock_status set sprice = ? , name = ? , update_time = ? where code = ?
`

type UpdateStockStatusParams struct {
	Sprice     float64 `db:"sprice" json:"sprice"`
	Name       string  `db:"name" json:"name"`
	UpdateTime string  `db:"update_time" json:"updateTime"`
	Code       string  `db:"code" json:"code"`
}

func (q *Queries) UpdateStockStatus(ctx context.Context, arg UpdateStockStatusParams) error {
	_, err := q.exec(ctx, q.updateStockStatusStmt, updateStockStatus,
		arg.Sprice,
		arg.Name,
		arg.UpdateTime,
		arg.Code,
	)
	return err
}
