// Code generated by sqlc. DO NOT EDIT.
// source: alert_config.sql

package generated

import (
	"context"
)

const createAlertConfig = `-- name: CreateAlertConfig :exec
insert into alert_config (id,user_id,stock_code,notify_type,price,deadline,create_time,` + "`" + `desc` + "`" + `) values (?,?,?,?,?,?,?,?)
`

type CreateAlertConfigParams struct {
	ID         string  `db:"id" json:"id"`
	UserID     string  `db:"user_id" json:"userID"`
	StockCode  string  `db:"stock_code" json:"stockCode"`
	NotifyType string  `db:"notify_type" json:"notifyType"`
	Price      float64 `db:"price" json:"price"`
	Deadline   int64   `db:"deadline" json:"deadline"`
	CreateTime int64   `db:"create_time" json:"createTime"`
	Desc       string  `db:"desc" json:"desc"`
}

func (q *Queries) CreateAlertConfig(ctx context.Context, arg CreateAlertConfigParams) error {
	_, err := q.exec(ctx, q.createAlertConfigStmt, createAlertConfig,
		arg.ID,
		arg.UserID,
		arg.StockCode,
		arg.NotifyType,
		arg.Price,
		arg.Deadline,
		arg.CreateTime,
		arg.Desc,
	)
	return err
}

const deleteAlertConfig = `-- name: DeleteAlertConfig :exec
delete from alert_config where id = ?
`

func (q *Queries) DeleteAlertConfig(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteAlertConfigStmt, deleteAlertConfig, id)
	return err
}

const getAlertConfigListByUserId = `-- name: GetAlertConfigListByUserId :many
select user_id, stock_code, notify_type, price, id, deadline, create_time, ` + "`" + `desc` + "`" + ` from alert_config where user_id = ? order by create_time limit ?,?
`

type GetAlertConfigListByUserIdParams struct {
	UserID string `db:"user_id" json:"userID"`
	Offset int32  `db:"offset" json:"offset"`
	Limit  int32  `db:"limit" json:"limit"`
}

func (q *Queries) GetAlertConfigListByUserId(ctx context.Context, arg GetAlertConfigListByUserIdParams) ([]AlertConfig, error) {
	rows, err := q.query(ctx, q.getAlertConfigListByUserIdStmt, getAlertConfigListByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlertConfig
	for rows.Next() {
		var i AlertConfig
		if err := rows.Scan(
			&i.UserID,
			&i.StockCode,
			&i.NotifyType,
			&i.Price,
			&i.ID,
			&i.Deadline,
			&i.CreateTime,
			&i.Desc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlertConfig = `-- name: UpdateAlertConfig :exec
Update alert_config set price = ?,deadline = ?,` + "`" + `desc` + "`" + ` = ? where id = ?
`

type UpdateAlertConfigParams struct {
	Price    float64 `db:"price" json:"price"`
	Deadline int64   `db:"deadline" json:"deadline"`
	Desc     string  `db:"desc" json:"desc"`
	ID       string  `db:"id" json:"id"`
}

func (q *Queries) UpdateAlertConfig(ctx context.Context, arg UpdateAlertConfigParams) error {
	_, err := q.exec(ctx, q.updateAlertConfigStmt, updateAlertConfig,
		arg.Price,
		arg.Deadline,
		arg.Desc,
		arg.ID,
	)
	return err
}
